// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invoices.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
    id, customer_id, invoice_number, subtotal, 
    discount, total, status, created_by, 
    currency_id, due_date, reminders, payment_info
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5, 
    $6, $7, $8, $9, $10, $11
) RETURNING id, customer_id, invoice_number, subtotal, discount, total, status, created_by, created_at, currency_id, due_date, reminders, metadata, amount_paid, balance_due, payment_info
`

type CreateInvoiceParams struct {
	CustomerID    pgtype.UUID        `json:"customer_id"`
	InvoiceNumber string             `json:"invoice_number"`
	Subtotal      pgtype.Numeric     `json:"subtotal"`
	Discount      pgtype.Numeric     `json:"discount"`
	Total         pgtype.Numeric     `json:"total"`
	Status        string             `json:"status"`
	CreatedBy     pgtype.UUID        `json:"created_by"`
	CurrencyID    pgtype.UUID        `json:"currency_id"`
	DueDate       pgtype.Timestamptz `json:"due_date"`
	Reminders     []byte             `json:"reminders"`
	PaymentInfo   pgtype.UUID        `json:"payment_info"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.CustomerID,
		arg.InvoiceNumber,
		arg.Subtotal,
		arg.Discount,
		arg.Total,
		arg.Status,
		arg.CreatedBy,
		arg.CurrencyID,
		arg.DueDate,
		arg.Reminders,
		arg.PaymentInfo,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.InvoiceNumber,
		&i.Subtotal,
		&i.Discount,
		&i.Total,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CurrencyID,
		&i.DueDate,
		&i.Reminders,
		&i.Metadata,
		&i.AmountPaid,
		&i.BalanceDue,
		&i.PaymentInfo,
	)
	return i, err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT id, customer_id, invoice_number, subtotal, discount, total, status, created_by, created_at, currency_id, due_date, reminders, metadata, amount_paid, balance_due, payment_info FROM invoices WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoiceByID(ctx context.Context, id pgtype.UUID) (Invoice, error) {
	row := q.db.QueryRow(ctx, getInvoiceByID, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.InvoiceNumber,
		&i.Subtotal,
		&i.Discount,
		&i.Total,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CurrencyID,
		&i.DueDate,
		&i.Reminders,
		&i.Metadata,
		&i.AmountPaid,
		&i.BalanceDue,
		&i.PaymentInfo,
	)
	return i, err
}

const getInvoicesCreatedByUser = `-- name: GetInvoicesCreatedByUser :many
SELECT id, customer_id, invoice_number, subtotal, discount, total, status, created_by, created_at, currency_id, due_date, reminders, metadata, amount_paid, balance_due, payment_info FROM invoices WHERE created_by = $1
`

func (q *Queries) GetInvoicesCreatedByUser(ctx context.Context, createdBy pgtype.UUID) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, getInvoicesCreatedByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.InvoiceNumber,
			&i.Subtotal,
			&i.Discount,
			&i.Total,
			&i.Status,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.CurrencyID,
			&i.DueDate,
			&i.Reminders,
			&i.Metadata,
			&i.AmountPaid,
			&i.BalanceDue,
			&i.PaymentInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalsByStatuses = `-- name: GetTotalsByStatuses :one
SELECT
    SUM(CASE WHEN status = 'paid' THEN total ELSE 0 END) AS paid_total,
    SUM(CASE WHEN status = 'unpaid' THEN total ELSE 0 END) AS unpaid_total,
    SUM(CASE WHEN status = 'overdue' THEN total ELSE 0 END) AS overdue_total,
    SUM(CASE WHEN status = 'draft' THEN total ELSE 0 END) AS draft_total
FROM
    invoices
WHERE
    created_by = $1
`

type GetTotalsByStatusesRow struct {
	PaidTotal    int64 `json:"paid_total"`
	UnpaidTotal  int64 `json:"unpaid_total"`
	OverdueTotal int64 `json:"overdue_total"`
	DraftTotal   int64 `json:"draft_total"`
}

func (q *Queries) GetTotalsByStatuses(ctx context.Context, createdBy pgtype.UUID) (GetTotalsByStatusesRow, error) {
	row := q.db.QueryRow(ctx, getTotalsByStatuses, createdBy)
	var i GetTotalsByStatusesRow
	err := row.Scan(
		&i.PaidTotal,
		&i.UnpaidTotal,
		&i.OverdueTotal,
		&i.DraftTotal,
	)
	return i, err
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoices 
SET 
    customer_id = $2, 
    subtotal = $3, 
    discount = $4, 
    total = $5, 
    status = $6, 
    reminders = $7,
     currency_id= $8,
     metadata= $9,
     due_date= $10,
     payment_info= $11
WHERE id = $1 
RETURNING id, customer_id, invoice_number, subtotal, discount, total, status, created_by, created_at, currency_id, due_date, reminders, metadata, amount_paid, balance_due, payment_info
`

type UpdateInvoiceParams struct {
	ID          pgtype.UUID        `json:"id"`
	CustomerID  pgtype.UUID        `json:"customer_id"`
	Subtotal    pgtype.Numeric     `json:"subtotal"`
	Discount    pgtype.Numeric     `json:"discount"`
	Total       pgtype.Numeric     `json:"total"`
	Status      string             `json:"status"`
	Reminders   []byte             `json:"reminders"`
	CurrencyID  pgtype.UUID        `json:"currency_id"`
	Metadata    []byte             `json:"metadata"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
	PaymentInfo pgtype.UUID        `json:"payment_info"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, updateInvoice,
		arg.ID,
		arg.CustomerID,
		arg.Subtotal,
		arg.Discount,
		arg.Total,
		arg.Status,
		arg.Reminders,
		arg.CurrencyID,
		arg.Metadata,
		arg.DueDate,
		arg.PaymentInfo,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.InvoiceNumber,
		&i.Subtotal,
		&i.Discount,
		&i.Total,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CurrencyID,
		&i.DueDate,
		&i.Reminders,
		&i.Metadata,
		&i.AmountPaid,
		&i.BalanceDue,
		&i.PaymentInfo,
	)
	return i, err
}

const updateInvoicePayment = `-- name: UpdateInvoicePayment :one
UPDATE invoices 
SET 
    amount_paid = $2, 
    status = $3
WHERE id = $1 
RETURNING id, customer_id, invoice_number, subtotal, discount, total, status, created_by, created_at, currency_id, due_date, reminders, metadata, amount_paid, balance_due, payment_info
`

type UpdateInvoicePaymentParams struct {
	ID         pgtype.UUID    `json:"id"`
	AmountPaid pgtype.Numeric `json:"amount_paid"`
	Status     string         `json:"status"`
}

func (q *Queries) UpdateInvoicePayment(ctx context.Context, arg UpdateInvoicePaymentParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, updateInvoicePayment, arg.ID, arg.AmountPaid, arg.Status)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.InvoiceNumber,
		&i.Subtotal,
		&i.Discount,
		&i.Total,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CurrencyID,
		&i.DueDate,
		&i.Reminders,
		&i.Metadata,
		&i.AmountPaid,
		&i.BalanceDue,
		&i.PaymentInfo,
	)
	return i, err
}
