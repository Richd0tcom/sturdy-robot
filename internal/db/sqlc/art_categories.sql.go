// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: art_categories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countArtCategories = `-- name: CountArtCategories :one
SELECT COUNT(*) FROM art_categories
`

func (q *Queries) CountArtCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countArtCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArtCategory = `-- name: CreateArtCategory :one
INSERT INTO art_categories (id, name, description)
VALUES (uuid_generate_v4(), $1, $2)
RETURNING id, name, description, created_at
`

type CreateArtCategoryParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateArtCategory(ctx context.Context, arg CreateArtCategoryParams) (ArtCategory, error) {
	row := q.db.QueryRow(ctx, createArtCategory, arg.Name, arg.Description)
	var i ArtCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteArtCategory = `-- name: DeleteArtCategory :exec
DELETE FROM art_categories
WHERE id = $1
`

func (q *Queries) DeleteArtCategory(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteArtCategory, id)
	return err
}

const getAllArtCategories = `-- name: GetAllArtCategories :many
SELECT id, name, description, created_at FROM art_categories
`

func (q *Queries) GetAllArtCategories(ctx context.Context) ([]ArtCategory, error) {
	rows, err := q.db.Query(ctx, getAllArtCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArtCategory{}
	for rows.Next() {
		var i ArtCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtCategory = `-- name: GetArtCategory :one
SELECT id, name, description, created_at FROM art_categories
WHERE id = $1
`

func (q *Queries) GetArtCategory(ctx context.Context, id pgtype.UUID) (ArtCategory, error) {
	row := q.db.QueryRow(ctx, getArtCategory, id)
	var i ArtCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateArtCategory = `-- name: UpdateArtCategory :one
UPDATE art_categories
SET name = $2, description = $3
WHERE id = $1
RETURNING id, name, description, created_at
`

type UpdateArtCategoryParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateArtCategory(ctx context.Context, arg UpdateArtCategoryParams) (ArtCategory, error) {
	row := q.db.QueryRow(ctx, updateArtCategory, arg.ID, arg.Name, arg.Description)
	var i ArtCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
