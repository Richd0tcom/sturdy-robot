// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff_roles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStaffRole = `-- name: CreateStaffRole :one
INSERT INTO staff_roles (id, title, description)
VALUES (uuid_generate_v4(),$1, $2)
RETURNING id, title, description, created_at
`

type CreateStaffRoleParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateStaffRole(ctx context.Context, arg CreateStaffRoleParams) (StaffRole, error) {
	row := q.db.QueryRow(ctx, createStaffRole, arg.Title, arg.Description)
	var i StaffRole
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getStaffRole = `-- name: GetStaffRole :one
SELECT id, title, description, created_at FROM staff_roles
WHERE id = $1
`

func (q *Queries) GetStaffRole(ctx context.Context, id pgtype.UUID) (StaffRole, error) {
	row := q.db.QueryRow(ctx, getStaffRole, id)
	var i StaffRole
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateStaffRole = `-- name: UpdateStaffRole :one
UPDATE staff_roles
SET title = $2, description = $3
WHERE id = $1
RETURNING id, title, description, created_at
`

type UpdateStaffRoleParams struct {
	ID          pgtype.UUID `json:"id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateStaffRole(ctx context.Context, arg UpdateStaffRoleParams) (StaffRole, error) {
	row := q.db.QueryRow(ctx, updateStaffRole, arg.ID, arg.Title, arg.Description)
	var i StaffRole
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
