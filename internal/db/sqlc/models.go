// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ProductType string

const (
	ProductTypePhysical ProductType = "physical"
	ProductTypeService  ProductType = "service"
)

func (e *ProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductType(s)
	case string:
		*e = ProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductType: %T", src)
	}
	return nil
}

type NullProductType struct {
	ProductType ProductType `json:"product_type"`
	Valid       bool        `json:"valid"` // Valid is true if ProductType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductType), nil
}

type ActivityLog struct {
	ID         pgtype.UUID        `json:"id"`
	EntityType string             `json:"entity_type"`
	EntityID   pgtype.UUID        `json:"entity_id"`
	Action     string             `json:"action"`
	Changes    []byte             `json:"changes"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UserID     pgtype.UUID        `json:"user_id"`
}

type Branch struct {
	ID             pgtype.UUID        `json:"id"`
	Name           string             `json:"name"`
	Address        pgtype.Text        `json:"address"`
	IsDefault      pgtype.Bool        `json:"is_default"`
	OrganizationID pgtype.UUID        `json:"organization_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

type Category struct {
	ID          pgtype.UUID        `json:"id"`
	ParentID    pgtype.UUID        `json:"parent_id"`
	Name        string             `json:"name"`
	BranchID    pgtype.UUID        `json:"branch_id"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type Currency struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Code      string             `json:"code"`
	Symbol    pgtype.Text        `json:"symbol"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Customer struct {
	ID             pgtype.UUID        `json:"id"`
	Name           string             `json:"name"`
	Email          pgtype.Text        `json:"email"`
	Phone          pgtype.Text        `json:"phone"`
	BillingAddress []byte             `json:"billing_address"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	BranchID       pgtype.UUID        `json:"branch_id"`
}

type Inventory struct {
	ID          pgtype.UUID        `json:"id"`
	VersionID   pgtype.UUID        `json:"version_id"`
	BranchID    pgtype.UUID        `json:"branch_id"`
	Quantity    pgtype.Int4        `json:"quantity"`
	UnitCost    pgtype.Numeric     `json:"unit_cost"`
	LastCounted pgtype.Timestamptz `json:"last_counted"`
}

type Invoice struct {
	ID            pgtype.UUID        `json:"id"`
	CustomerID    pgtype.UUID        `json:"customer_id"`
	InvoiceNumber string             `json:"invoice_number"`
	Subtotal      pgtype.Numeric     `json:"subtotal"`
	Discount      pgtype.Numeric     `json:"discount"`
	Total         pgtype.Numeric     `json:"total"`
	Status        string             `json:"status"`
	CreatedBy     pgtype.UUID        `json:"created_by"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	CurrencyID    pgtype.UUID        `json:"currency_id"`
	DueDate       pgtype.Timestamptz `json:"due_date"`
	Reminders     []byte             `json:"reminders"`
	Metadata      []byte             `json:"metadata"`
	AmountPaid    pgtype.Numeric     `json:"amount_paid"`
	BalanceDue    pgtype.Numeric     `json:"balance_due"`
	PaymentInfo   pgtype.UUID        `json:"payment_info"`
}

type InvoiceItem struct {
	ID        pgtype.UUID    `json:"id"`
	InvoiceID pgtype.UUID    `json:"invoice_id"`
	VersionID pgtype.UUID    `json:"version_id"`
	Quantity  int32          `json:"quantity"`
	UnitPrice pgtype.Numeric `json:"unit_price"`
	Subtotal  pgtype.Numeric `json:"subtotal"`
	Metadata  []byte         `json:"metadata"`
}

type Organization struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Active    pgtype.Bool        `json:"active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Payment struct {
	ID            pgtype.UUID        `json:"id"`
	InvoiceID     pgtype.UUID        `json:"invoice_id"`
	PaymentMethod pgtype.Text        `json:"payment_method"`
	PaymentAmount pgtype.Numeric     `json:"payment_amount"`
	PaymentRef    pgtype.Text        `json:"payment_ref"`
	PaymentDate   pgtype.Timestamptz `json:"payment_date"`
	Metadata      []byte             `json:"metadata"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	CreatedBy     pgtype.UUID        `json:"created_by"`
}

type PaymentInfo struct {
	ID          pgtype.UUID        `json:"id"`
	UserID      pgtype.UUID        `json:"user_id"`
	AccountNo   string             `json:"account_no"`
	RoutingNo   pgtype.Text        `json:"routing_no"`
	AccountName string             `json:"account_name"`
	BankName    string             `json:"bank_name"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type Product struct {
	ID                  pgtype.UUID        `json:"id"`
	CategoryID          pgtype.UUID        `json:"category_id"`
	BranchID            pgtype.UUID        `json:"branch_id"`
	Name                string             `json:"name"`
	ProductType         string             `json:"product_type"`
	ServicePricingModel pgtype.Text        `json:"service_pricing_model"`
	DefaultUnit         pgtype.Text        `json:"default_unit"`
	IsBillable          pgtype.Bool        `json:"is_billable"`
	Sku                 string             `json:"sku"`
	Description         pgtype.Text        `json:"description"`
	BasePrice           pgtype.Numeric     `json:"base_price"`
	CustomFields        []byte             `json:"custom_fields"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
}

type ProductVersion struct {
	ID              pgtype.UUID        `json:"id"`
	ProductID       pgtype.UUID        `json:"product_id"`
	BranchID        pgtype.UUID        `json:"branch_id"`
	Name            string             `json:"name"`
	PriceAdjustment pgtype.Numeric     `json:"price_adjustment"`
	Attributes      []byte             `json:"attributes"`
	StockQuantity   pgtype.Int4        `json:"stock_quantity"`
	ReorderPoint    pgtype.Int4        `json:"reorder_point"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Address   pgtype.Text        `json:"address"`
	BranchID  pgtype.UUID        `json:"branch_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}
