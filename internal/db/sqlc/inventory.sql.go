// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: inventory.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createInventoryRecord = `-- name: CreateInventoryRecord :one
INSERT INTO inventory (
    id, version_id, branch_id, quantity, unit_cost, last_counted
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5
) RETURNING id, version_id, branch_id, quantity, unit_cost, last_counted
`

type CreateInventoryRecordParams struct {
	VersionID   uuid.UUID      `json:"version_id"`
	BranchID    uuid.UUID      `json:"branch_id"`
	Quantity    sql.NullInt32  `json:"quantity"`
	UnitCost    sql.NullString `json:"unit_cost"`
	LastCounted sql.NullTime   `json:"last_counted"`
}

// Insert inventory record
func (q *Queries) CreateInventoryRecord(ctx context.Context, arg CreateInventoryRecordParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, createInventoryRecord,
		arg.VersionID,
		arg.BranchID,
		arg.Quantity,
		arg.UnitCost,
		arg.LastCounted,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.BranchID,
		&i.Quantity,
		&i.UnitCost,
		&i.LastCounted,
	)
	return i, err
}

const getInventoryByBranchID = `-- name: GetInventoryByBranchID :many
SELECT id, version_id, branch_id, quantity, unit_cost, last_counted FROM inventory WHERE branch_id = $1
`

// Get inventory by branch ID
func (q *Queries) GetInventoryByBranchID(ctx context.Context, branchID uuid.UUID) ([]Inventory, error) {
	rows, err := q.db.QueryContext(ctx, getInventoryByBranchID, branchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Inventory{}
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.VersionID,
			&i.BranchID,
			&i.Quantity,
			&i.UnitCost,
			&i.LastCounted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInventoryByID = `-- name: GetInventoryByID :one
SELECT id, version_id, branch_id, quantity, unit_cost, last_counted FROM inventory WHERE id = $1 LIMIT 1
`

// Get inventory by ID
func (q *Queries) GetInventoryByID(ctx context.Context, id uuid.UUID) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, getInventoryByID, id)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.BranchID,
		&i.Quantity,
		&i.UnitCost,
		&i.LastCounted,
	)
	return i, err
}

const getInventoryByVersionID = `-- name: GetInventoryByVersionID :one
SELECT id, version_id, branch_id, quantity, unit_cost, last_counted FROM inventory WHERE version_id = $1 LIMIT 1
`

// Get inventory by version ID
func (q *Queries) GetInventoryByVersionID(ctx context.Context, versionID uuid.UUID) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, getInventoryByVersionID, versionID)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.BranchID,
		&i.Quantity,
		&i.UnitCost,
		&i.LastCounted,
	)
	return i, err
}

const updateInventory = `-- name: UpdateInventory :one
UPDATE inventory 
SET 
    quantity = $2, unit_cost = $3, last_counted = $4
WHERE id = $1 RETURNING id, version_id, branch_id, quantity, unit_cost, last_counted
`

type UpdateInventoryParams struct {
	ID          uuid.UUID      `json:"id"`
	Quantity    sql.NullInt32  `json:"quantity"`
	UnitCost    sql.NullString `json:"unit_cost"`
	LastCounted sql.NullTime   `json:"last_counted"`
}

// Update inventory
func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, updateInventory,
		arg.ID,
		arg.Quantity,
		arg.UnitCost,
		arg.LastCounted,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.BranchID,
		&i.Quantity,
		&i.UnitCost,
		&i.LastCounted,
	)
	return i, err
}
