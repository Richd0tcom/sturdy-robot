// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    id, invoice_id, payment_method, payment_amount, 
    payment_ref, payment_date, metadata, created_by
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7
) RETURNING id, invoice_id, payment_method, payment_amount, payment_ref, payment_date, metadata, created_at, created_by
`

type CreatePaymentParams struct {
	InvoiceID     pgtype.UUID        `json:"invoice_id"`
	PaymentMethod pgtype.Text        `json:"payment_method"`
	PaymentAmount pgtype.Numeric     `json:"payment_amount"`
	PaymentRef    pgtype.Text        `json:"payment_ref"`
	PaymentDate   pgtype.Timestamptz `json:"payment_date"`
	Metadata      []byte             `json:"metadata"`
	CreatedBy     pgtype.UUID        `json:"created_by"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.InvoiceID,
		arg.PaymentMethod,
		arg.PaymentAmount,
		arg.PaymentRef,
		arg.PaymentDate,
		arg.Metadata,
		arg.CreatedBy,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.PaymentMethod,
		&i.PaymentAmount,
		&i.PaymentRef,
		&i.PaymentDate,
		&i.Metadata,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, invoice_id, payment_method, payment_amount, payment_ref, payment_date, metadata, created_at, created_by FROM payments WHERE id = $1
`

// Get payment by ID
func (q *Queries) GetPaymentByID(ctx context.Context, id pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.PaymentMethod,
		&i.PaymentAmount,
		&i.PaymentRef,
		&i.PaymentDate,
		&i.Metadata,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getPaymentsByInvoiceID = `-- name: GetPaymentsByInvoiceID :many
SELECT id, invoice_id, payment_method, payment_amount, payment_ref, payment_date, metadata, created_at, created_by FROM payments WHERE invoice_id = $1
`

// Get payments by invoice ID
func (q *Queries) GetPaymentsByInvoiceID(ctx context.Context, invoiceID pgtype.UUID) ([]Payment, error) {
	rows, err := q.db.Query(ctx, getPaymentsByInvoiceID, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.PaymentMethod,
			&i.PaymentAmount,
			&i.PaymentRef,
			&i.PaymentDate,
			&i.Metadata,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments 
SET 
    payment_method = $2, payment_amount = $3, 
    payment_ref = $4, payment_date = $5, metadata = $6
WHERE id = $1 RETURNING id, invoice_id, payment_method, payment_amount, payment_ref, payment_date, metadata, created_at, created_by
`

type UpdatePaymentParams struct {
	ID            pgtype.UUID        `json:"id"`
	PaymentMethod pgtype.Text        `json:"payment_method"`
	PaymentAmount pgtype.Numeric     `json:"payment_amount"`
	PaymentRef    pgtype.Text        `json:"payment_ref"`
	PaymentDate   pgtype.Timestamptz `json:"payment_date"`
	Metadata      []byte             `json:"metadata"`
}

// Update payment
func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment,
		arg.ID,
		arg.PaymentMethod,
		arg.PaymentAmount,
		arg.PaymentRef,
		arg.PaymentDate,
		arg.Metadata,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.PaymentMethod,
		&i.PaymentAmount,
		&i.PaymentRef,
		&i.PaymentDate,
		&i.Metadata,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}
