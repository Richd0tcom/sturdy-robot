// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
  name,
  email

) VALUES (
  $1, $2
) RETURNING id, name, email, active, created_at
`

type CreateOrganizationParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.Name, arg.Email)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, name, email, address, branch_id, created_at from users 
where id = $1 LIMIT 1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.BranchID,
		&i.CreatedAt,
	)
	return i, err
}
