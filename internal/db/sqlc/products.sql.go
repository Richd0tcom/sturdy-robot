// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    id, category_id, branch_id, name, product_type, 
    service_pricing_model, default_unit, is_billable, 
    sku, description, base_price
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, category_id, branch_id, name, product_type, service_pricing_model, default_unit, is_billable, sku, description, base_price, custom_fields, created_at, updated_at
`

type CreateProductParams struct {
	CategoryID          uuid.NullUUID  `json:"category_id"`
	BranchID            uuid.UUID      `json:"branch_id"`
	Name                string         `json:"name"`
	ProductType         string         `json:"product_type"`
	ServicePricingModel sql.NullString `json:"service_pricing_model"`
	DefaultUnit         sql.NullString `json:"default_unit"`
	IsBillable          sql.NullBool   `json:"is_billable"`
	Sku                 sql.NullString `json:"sku"`
	Description         sql.NullString `json:"description"`
	BasePrice           sql.NullString `json:"base_price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.CategoryID,
		arg.BranchID,
		arg.Name,
		arg.ProductType,
		arg.ServicePricingModel,
		arg.DefaultUnit,
		arg.IsBillable,
		arg.Sku,
		arg.Description,
		arg.BasePrice,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BranchID,
		&i.Name,
		&i.ProductType,
		&i.ServicePricingModel,
		&i.DefaultUnit,
		&i.IsBillable,
		&i.Sku,
		&i.Description,
		&i.BasePrice,
		&i.CustomFields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByBranchID = `-- name: GetProductsByBranchID :one
SELECT id, category_id, branch_id, name, product_type, service_pricing_model, default_unit, is_billable, sku, description, base_price, custom_fields, created_at, updated_at FROM products 
WHERE branch_id = $1 LIMIT 1
`

func (q *Queries) GetProductsByBranchID(ctx context.Context, branchID uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductsByBranchID, branchID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BranchID,
		&i.Name,
		&i.ProductType,
		&i.ServicePricingModel,
		&i.DefaultUnit,
		&i.IsBillable,
		&i.Sku,
		&i.Description,
		&i.BasePrice,
		&i.CustomFields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByID = `-- name: GetProductsByID :one
SELECT id, category_id, branch_id, name, product_type, service_pricing_model, default_unit, is_billable, sku, description, base_price, custom_fields, created_at, updated_at FROM products 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductsByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductsByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BranchID,
		&i.Name,
		&i.ProductType,
		&i.ServicePricingModel,
		&i.DefaultUnit,
		&i.IsBillable,
		&i.Sku,
		&i.Description,
		&i.BasePrice,
		&i.CustomFields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products 
SET 
    category_id = $2, 
    name = $3, 
    product_type = $4, 
    service_pricing_model = $5,
    default_unit = $6,
    is_billable = $7,
    sku = $8,
    description = $9,
    base_price = $10
WHERE id = $1 
RETURNING id, category_id, branch_id, name, product_type, service_pricing_model, default_unit, is_billable, sku, description, base_price, custom_fields, created_at, updated_at
`

type UpdateProductParams struct {
	ID                  uuid.UUID      `json:"id"`
	CategoryID          uuid.NullUUID  `json:"category_id"`
	Name                string         `json:"name"`
	ProductType         string         `json:"product_type"`
	ServicePricingModel sql.NullString `json:"service_pricing_model"`
	DefaultUnit         sql.NullString `json:"default_unit"`
	IsBillable          sql.NullBool   `json:"is_billable"`
	Sku                 sql.NullString `json:"sku"`
	Description         sql.NullString `json:"description"`
	BasePrice           sql.NullString `json:"base_price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.ProductType,
		arg.ServicePricingModel,
		arg.DefaultUnit,
		arg.IsBillable,
		arg.Sku,
		arg.Description,
		arg.BasePrice,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BranchID,
		&i.Name,
		&i.ProductType,
		&i.ServicePricingModel,
		&i.DefaultUnit,
		&i.IsBillable,
		&i.Sku,
		&i.Description,
		&i.BasePrice,
		&i.CustomFields,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
