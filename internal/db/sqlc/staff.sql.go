// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countStaff = `-- name: CountStaff :one
SELECT COUNT(*) FROM staff
`

func (q *Queries) CountStaff(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countStaff)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStaff = `-- name: CreateStaff :one
INSERT INTO staff (
    id, first_name, last_name, role_id, email, phone, hire_date, status
)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7)
RETURNING id, first_name, last_name, role_id, email, phone, hire_date, status, created_at
`

type CreateStaffParams struct {
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	RoleID    pgtype.UUID `json:"role_id"`
	Email     string      `json:"email"`
	Phone     pgtype.Text `json:"phone"`
	HireDate  pgtype.Date `json:"hire_date"`
	Status    pgtype.Text `json:"status"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) (Staff, error) {
	row := q.db.QueryRow(ctx, createStaff,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
		arg.Email,
		arg.Phone,
		arg.HireDate,
		arg.Status,
	)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.RoleID,
		&i.Email,
		&i.Phone,
		&i.HireDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStaff = `-- name: DeleteStaff :exec
DELETE FROM staff
WHERE id = $1
`

func (q *Queries) DeleteStaff(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStaff, id)
	return err
}

const getAllStaff = `-- name: GetAllStaff :many
SELECT 
    staff.id, staff.first_name, staff.last_name, staff.role_id, staff.email, staff.phone, staff.hire_date, staff.status, staff.created_at,
    staff_roles.title AS role_title
FROM staff
LEFT JOIN staff_roles ON staff.role_id = staff_roles.id
`

type GetAllStaffRow struct {
	ID        pgtype.UUID      `json:"id"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	RoleID    pgtype.UUID      `json:"role_id"`
	Email     string           `json:"email"`
	Phone     pgtype.Text      `json:"phone"`
	HireDate  pgtype.Date      `json:"hire_date"`
	Status    pgtype.Text      `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	RoleTitle pgtype.Text      `json:"role_title"`
}

func (q *Queries) GetAllStaff(ctx context.Context) ([]GetAllStaffRow, error) {
	rows, err := q.db.Query(ctx, getAllStaff)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllStaffRow{}
	for rows.Next() {
		var i GetAllStaffRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.RoleID,
			&i.Email,
			&i.Phone,
			&i.HireDate,
			&i.Status,
			&i.CreatedAt,
			&i.RoleTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaff = `-- name: GetStaff :one
SELECT 
    staff.id, staff.first_name, staff.last_name, staff.role_id, staff.email, staff.phone, staff.hire_date, staff.status, staff.created_at,
    staff_roles.title AS role_title
FROM staff
LEFT JOIN staff_roles ON staff.role_id = staff_roles.id
WHERE staff.id = $1
`

type GetStaffRow struct {
	ID        pgtype.UUID      `json:"id"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	RoleID    pgtype.UUID      `json:"role_id"`
	Email     string           `json:"email"`
	Phone     pgtype.Text      `json:"phone"`
	HireDate  pgtype.Date      `json:"hire_date"`
	Status    pgtype.Text      `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	RoleTitle pgtype.Text      `json:"role_title"`
}

func (q *Queries) GetStaff(ctx context.Context, id pgtype.UUID) (GetStaffRow, error) {
	row := q.db.QueryRow(ctx, getStaff, id)
	var i GetStaffRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.RoleID,
		&i.Email,
		&i.Phone,
		&i.HireDate,
		&i.Status,
		&i.CreatedAt,
		&i.RoleTitle,
	)
	return i, err
}

const updateStaff = `-- name: UpdateStaff :one
UPDATE staff
SET 
    first_name = $2, last_name = $3, role_id = $4, email = $5, phone = $6,
    hire_date = $7, status = $8
WHERE id = $1
RETURNING id, first_name, last_name, role_id, email, phone, hire_date, status, created_at
`

type UpdateStaffParams struct {
	ID        pgtype.UUID `json:"id"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	RoleID    pgtype.UUID `json:"role_id"`
	Email     string      `json:"email"`
	Phone     pgtype.Text `json:"phone"`
	HireDate  pgtype.Date `json:"hire_date"`
	Status    pgtype.Text `json:"status"`
}

func (q *Queries) UpdateStaff(ctx context.Context, arg UpdateStaffParams) (Staff, error) {
	row := q.db.QueryRow(ctx, updateStaff,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
		arg.Email,
		arg.Phone,
		arg.HireDate,
		arg.Status,
	)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.RoleID,
		&i.Email,
		&i.Phone,
		&i.HireDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
