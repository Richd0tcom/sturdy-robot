// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: branches.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBranch = `-- name: CreateBranch :one
INSERT INTO branches (
  name,
  address,
  organization_id

) VALUES (
  $1, $2, $3
) RETURNING id, name, address, is_default, organization_id, created_at
`

type CreateBranchParams struct {
	Name           string         `json:"name"`
	Address        sql.NullString `json:"address"`
	OrganizationID uuid.UUID      `json:"organization_id"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) (Branch, error) {
	row := q.db.QueryRowContext(ctx, createBranch, arg.Name, arg.Address, arg.OrganizationID)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.IsDefault,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return i, err
}

const getBranchByID = `-- name: GetBranchByID :one
SELECT id, name, address, is_default, organization_id, created_at from branches 
where id = $1 LIMIT 1
`

func (q *Queries) GetBranchByID(ctx context.Context, id uuid.UUID) (Branch, error) {
	row := q.db.QueryRowContext(ctx, getBranchByID, id)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.IsDefault,
		&i.OrganizationID,
		&i.CreatedAt,
	)
	return i, err
}
