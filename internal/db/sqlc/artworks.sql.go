// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: artworks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countArtworks = `-- name: CountArtworks :one
SELECT COUNT(*) FROM artworks
`

func (q *Queries) CountArtworks(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countArtworks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArtwork = `-- name: CreateArtwork :one
INSERT INTO artworks (
    id, title, artist_id, category_id, year_created, medium, dimensions,
    description, acquisition_date, condition_status, location_in_museum, image_url
)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, title, artist_id, category_id, year_created, medium, dimensions, description, acquisition_date, condition_status, location_in_museum, image_url, created_at
`

type CreateArtworkParams struct {
	Title            string      `json:"title"`
	ArtistID         pgtype.UUID `json:"artist_id"`
	CategoryID       pgtype.UUID `json:"category_id"`
	YearCreated      pgtype.Int4 `json:"year_created"`
	Medium           pgtype.Text `json:"medium"`
	Dimensions       pgtype.Text `json:"dimensions"`
	Description      pgtype.Text `json:"description"`
	AcquisitionDate  pgtype.Date `json:"acquisition_date"`
	ConditionStatus  pgtype.Text `json:"condition_status"`
	LocationInMuseum pgtype.Text `json:"location_in_museum"`
	ImageUrl         pgtype.Text `json:"image_url"`
}

func (q *Queries) CreateArtwork(ctx context.Context, arg CreateArtworkParams) (Artwork, error) {
	row := q.db.QueryRow(ctx, createArtwork,
		arg.Title,
		arg.ArtistID,
		arg.CategoryID,
		arg.YearCreated,
		arg.Medium,
		arg.Dimensions,
		arg.Description,
		arg.AcquisitionDate,
		arg.ConditionStatus,
		arg.LocationInMuseum,
		arg.ImageUrl,
	)
	var i Artwork
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ArtistID,
		&i.CategoryID,
		&i.YearCreated,
		&i.Medium,
		&i.Dimensions,
		&i.Description,
		&i.AcquisitionDate,
		&i.ConditionStatus,
		&i.LocationInMuseum,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getAllArtwork = `-- name: GetAllArtwork :one
SELECT 
    artworks.id, artworks.title, artworks.artist_id, artworks.category_id, artworks.year_created, artworks.medium, artworks.dimensions, artworks.description, artworks.acquisition_date, artworks.condition_status, artworks.location_in_museum, artworks.image_url, artworks.created_at,
    artists.name AS artist_name,
    art_categories.name AS category_name
FROM artworks
LEFT JOIN artists ON artworks.artist_id = artists.id
LEFT JOIN art_categories ON artworks.category_id = art_categories.id
`

type GetAllArtworkRow struct {
	ID               pgtype.UUID      `json:"id"`
	Title            string           `json:"title"`
	ArtistID         pgtype.UUID      `json:"artist_id"`
	CategoryID       pgtype.UUID      `json:"category_id"`
	YearCreated      pgtype.Int4      `json:"year_created"`
	Medium           pgtype.Text      `json:"medium"`
	Dimensions       pgtype.Text      `json:"dimensions"`
	Description      pgtype.Text      `json:"description"`
	AcquisitionDate  pgtype.Date      `json:"acquisition_date"`
	ConditionStatus  pgtype.Text      `json:"condition_status"`
	LocationInMuseum pgtype.Text      `json:"location_in_museum"`
	ImageUrl         pgtype.Text      `json:"image_url"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	ArtistName       pgtype.Text      `json:"artist_name"`
	CategoryName     pgtype.Text      `json:"category_name"`
}

func (q *Queries) GetAllArtwork(ctx context.Context) (GetAllArtworkRow, error) {
	row := q.db.QueryRow(ctx, getAllArtwork)
	var i GetAllArtworkRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ArtistID,
		&i.CategoryID,
		&i.YearCreated,
		&i.Medium,
		&i.Dimensions,
		&i.Description,
		&i.AcquisitionDate,
		&i.ConditionStatus,
		&i.LocationInMuseum,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.ArtistName,
		&i.CategoryName,
	)
	return i, err
}

const getArtwork = `-- name: GetArtwork :one
SELECT 
    artworks.id, artworks.title, artworks.artist_id, artworks.category_id, artworks.year_created, artworks.medium, artworks.dimensions, artworks.description, artworks.acquisition_date, artworks.condition_status, artworks.location_in_museum, artworks.image_url, artworks.created_at,
    artists.name AS artist_name,
    art_categories.name AS category_name
FROM artworks
LEFT JOIN artists ON artworks.artist_id = artists.id
LEFT JOIN art_categories ON artworks.category_id = art_categories.id
WHERE artworks.id = $1
`

type GetArtworkRow struct {
	ID               pgtype.UUID      `json:"id"`
	Title            string           `json:"title"`
	ArtistID         pgtype.UUID      `json:"artist_id"`
	CategoryID       pgtype.UUID      `json:"category_id"`
	YearCreated      pgtype.Int4      `json:"year_created"`
	Medium           pgtype.Text      `json:"medium"`
	Dimensions       pgtype.Text      `json:"dimensions"`
	Description      pgtype.Text      `json:"description"`
	AcquisitionDate  pgtype.Date      `json:"acquisition_date"`
	ConditionStatus  pgtype.Text      `json:"condition_status"`
	LocationInMuseum pgtype.Text      `json:"location_in_museum"`
	ImageUrl         pgtype.Text      `json:"image_url"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	ArtistName       pgtype.Text      `json:"artist_name"`
	CategoryName     pgtype.Text      `json:"category_name"`
}

func (q *Queries) GetArtwork(ctx context.Context, id pgtype.UUID) (GetArtworkRow, error) {
	row := q.db.QueryRow(ctx, getArtwork, id)
	var i GetArtworkRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ArtistID,
		&i.CategoryID,
		&i.YearCreated,
		&i.Medium,
		&i.Dimensions,
		&i.Description,
		&i.AcquisitionDate,
		&i.ConditionStatus,
		&i.LocationInMuseum,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.ArtistName,
		&i.CategoryName,
	)
	return i, err
}

const updateArtwork = `-- name: UpdateArtwork :one
UPDATE artworks
SET 
    title = $2, artist_id = $3, category_id = $4, year_created = $5, medium = $6,
    dimensions = $7, description = $8, acquisition_date = $9, condition_status = $10,
    location_in_museum = $11, image_url = $12
WHERE id = $1
RETURNING id, title, artist_id, category_id, year_created, medium, dimensions, description, acquisition_date, condition_status, location_in_museum, image_url, created_at
`

type UpdateArtworkParams struct {
	ID               pgtype.UUID `json:"id"`
	Title            string      `json:"title"`
	ArtistID         pgtype.UUID `json:"artist_id"`
	CategoryID       pgtype.UUID `json:"category_id"`
	YearCreated      pgtype.Int4 `json:"year_created"`
	Medium           pgtype.Text `json:"medium"`
	Dimensions       pgtype.Text `json:"dimensions"`
	Description      pgtype.Text `json:"description"`
	AcquisitionDate  pgtype.Date `json:"acquisition_date"`
	ConditionStatus  pgtype.Text `json:"condition_status"`
	LocationInMuseum pgtype.Text `json:"location_in_museum"`
	ImageUrl         pgtype.Text `json:"image_url"`
}

func (q *Queries) UpdateArtwork(ctx context.Context, arg UpdateArtworkParams) (Artwork, error) {
	row := q.db.QueryRow(ctx, updateArtwork,
		arg.ID,
		arg.Title,
		arg.ArtistID,
		arg.CategoryID,
		arg.YearCreated,
		arg.Medium,
		arg.Dimensions,
		arg.Description,
		arg.AcquisitionDate,
		arg.ConditionStatus,
		arg.LocationInMuseum,
		arg.ImageUrl,
	)
	var i Artwork
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ArtistID,
		&i.CategoryID,
		&i.YearCreated,
		&i.Medium,
		&i.Dimensions,
		&i.Description,
		&i.AcquisitionDate,
		&i.ConditionStatus,
		&i.LocationInMuseum,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}
