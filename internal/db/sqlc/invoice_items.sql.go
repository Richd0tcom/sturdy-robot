// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invoice_items.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createInvoiceItem = `-- name: CreateInvoiceItem :one
INSERT INTO invoice_items (
    id, invoice_id, version_id, quantity, 
    unit_price, subtotal
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5
) RETURNING id, invoice_id, version_id, quantity, unit_price, subtotal, metadata
`

type CreateInvoiceItemParams struct {
	InvoiceID uuid.UUID `json:"invoice_id"`
	VersionID uuid.UUID `json:"version_id"`
	Quantity  int32     `json:"quantity"`
	UnitPrice string    `json:"unit_price"`
	Subtotal  string    `json:"subtotal"`
}

func (q *Queries) CreateInvoiceItem(ctx context.Context, arg CreateInvoiceItemParams) (InvoiceItem, error) {
	row := q.db.QueryRowContext(ctx, createInvoiceItem,
		arg.InvoiceID,
		arg.VersionID,
		arg.Quantity,
		arg.UnitPrice,
		arg.Subtotal,
	)
	var i InvoiceItem
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.VersionID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
		&i.Metadata,
	)
	return i, err
}

const getInvoiceItemsByInvoiceID = `-- name: GetInvoiceItemsByInvoiceID :many
SELECT id, invoice_id, version_id, quantity, unit_price, subtotal, metadata FROM invoice_items WHERE invoice_id = $1
`

func (q *Queries) GetInvoiceItemsByInvoiceID(ctx context.Context, invoiceID uuid.UUID) ([]InvoiceItem, error) {
	rows, err := q.db.QueryContext(ctx, getInvoiceItemsByInvoiceID, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoiceItem{}
	for rows.Next() {
		var i InvoiceItem
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.VersionID,
			&i.Quantity,
			&i.UnitPrice,
			&i.Subtotal,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoiceItem = `-- name: UpdateInvoiceItem :one
UPDATE invoice_items 
SET 
    version_id = $2, 
    quantity = $3, 
    unit_price = $4, 
    subtotal = $5
WHERE id = $1 
RETURNING id, invoice_id, version_id, quantity, unit_price, subtotal, metadata
`

type UpdateInvoiceItemParams struct {
	ID        uuid.UUID `json:"id"`
	VersionID uuid.UUID `json:"version_id"`
	Quantity  int32     `json:"quantity"`
	UnitPrice string    `json:"unit_price"`
	Subtotal  string    `json:"subtotal"`
}

func (q *Queries) UpdateInvoiceItem(ctx context.Context, arg UpdateInvoiceItemParams) (InvoiceItem, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceItem,
		arg.ID,
		arg.VersionID,
		arg.Quantity,
		arg.UnitPrice,
		arg.Subtotal,
	)
	var i InvoiceItem
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.VersionID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
		&i.Metadata,
	)
	return i, err
}
