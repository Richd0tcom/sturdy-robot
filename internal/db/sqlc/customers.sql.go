// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, name, email, phone, billing_address, branch_id) 
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5) 
RETURNING id, name, email, phone, billing_address, created_at, branch_id
`

type CreateCustomerParams struct {
	Name           string      `json:"name"`
	Email          pgtype.Text `json:"email"`
	Phone          pgtype.Text `json:"phone"`
	BillingAddress []byte      `json:"billing_address"`
	BranchID       pgtype.UUID `json:"branch_id"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.BillingAddress,
		arg.BranchID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.BranchID,
	)
	return i, err
}

const deleteCustomerByID = `-- name: DeleteCustomerByID :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomerByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomerByID, id)
	return err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, name, email, phone, billing_address, created_at, branch_id FROM customers 
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email pgtype.Text) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.BranchID,
	)
	return i, err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, name, email, phone, billing_address, created_at, branch_id FROM customers 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomerById(ctx context.Context, id pgtype.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.BillingAddress,
		&i.CreatedAt,
		&i.BranchID,
	)
	return i, err
}

const getCustomersByBranch = `-- name: GetCustomersByBranch :many
SELECT id, name, email, phone, billing_address, created_at, branch_id FROM customers 
WHERE branch_id = $1
`

func (q *Queries) GetCustomersByBranch(ctx context.Context, branchID pgtype.UUID) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomersByBranch, branchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.BillingAddress,
			&i.CreatedAt,
			&i.BranchID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
