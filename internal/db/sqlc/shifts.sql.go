// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shifts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countShifts = `-- name: CountShifts :one
SELECT COUNT(*) FROM shifts
`

func (q *Queries) CountShifts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countShifts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createShift = `-- name: CreateShift :one
INSERT INTO shifts (
    id, staff_id, shift_date, start_time, end_time, status, notes
)
VALUES (uuid_generate_v4(),$1, $2, $3, $4, $5, $6)
RETURNING id, staff_id, shift_date, start_time, end_time, status, notes, created_at
`

type CreateShiftParams struct {
	StaffID   pgtype.UUID `json:"staff_id"`
	ShiftDate pgtype.Date `json:"shift_date"`
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
	Status    pgtype.Text `json:"status"`
	Notes     pgtype.Text `json:"notes"`
}

func (q *Queries) CreateShift(ctx context.Context, arg CreateShiftParams) (Shift, error) {
	row := q.db.QueryRow(ctx, createShift,
		arg.StaffID,
		arg.ShiftDate,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
		arg.Notes,
	)
	var i Shift
	err := row.Scan(
		&i.ID,
		&i.StaffID,
		&i.ShiftDate,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const getAllShifts = `-- name: GetAllShifts :one
SELECT 
    shifts.id, shifts.staff_id, shifts.shift_date, shifts.start_time, shifts.end_time, shifts.status, shifts.notes, shifts.created_at,
    staff.first_name AS staff_first_name,
    staff.last_name AS staff_last_name
FROM shifts
LEFT JOIN staff ON shifts.staff_id = staff.id
`

type GetAllShiftsRow struct {
	ID             pgtype.UUID      `json:"id"`
	StaffID        pgtype.UUID      `json:"staff_id"`
	ShiftDate      pgtype.Date      `json:"shift_date"`
	StartTime      pgtype.Time      `json:"start_time"`
	EndTime        pgtype.Time      `json:"end_time"`
	Status         pgtype.Text      `json:"status"`
	Notes          pgtype.Text      `json:"notes"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	StaffFirstName pgtype.Text      `json:"staff_first_name"`
	StaffLastName  pgtype.Text      `json:"staff_last_name"`
}

func (q *Queries) GetAllShifts(ctx context.Context) (GetAllShiftsRow, error) {
	row := q.db.QueryRow(ctx, getAllShifts)
	var i GetAllShiftsRow
	err := row.Scan(
		&i.ID,
		&i.StaffID,
		&i.ShiftDate,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.StaffFirstName,
		&i.StaffLastName,
	)
	return i, err
}

const getShift = `-- name: GetShift :one
SELECT 
    shifts.id, shifts.staff_id, shifts.shift_date, shifts.start_time, shifts.end_time, shifts.status, shifts.notes, shifts.created_at,
    staff.first_name AS staff_first_name,
    staff.last_name AS staff_last_name
FROM shifts
LEFT JOIN staff ON shifts.staff_id = staff.id
WHERE shifts.id = $1
`

type GetShiftRow struct {
	ID             pgtype.UUID      `json:"id"`
	StaffID        pgtype.UUID      `json:"staff_id"`
	ShiftDate      pgtype.Date      `json:"shift_date"`
	StartTime      pgtype.Time      `json:"start_time"`
	EndTime        pgtype.Time      `json:"end_time"`
	Status         pgtype.Text      `json:"status"`
	Notes          pgtype.Text      `json:"notes"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	StaffFirstName pgtype.Text      `json:"staff_first_name"`
	StaffLastName  pgtype.Text      `json:"staff_last_name"`
}

func (q *Queries) GetShift(ctx context.Context, id pgtype.UUID) (GetShiftRow, error) {
	row := q.db.QueryRow(ctx, getShift, id)
	var i GetShiftRow
	err := row.Scan(
		&i.ID,
		&i.StaffID,
		&i.ShiftDate,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.StaffFirstName,
		&i.StaffLastName,
	)
	return i, err
}

const updateShift = `-- name: UpdateShift :one
UPDATE shifts
SET 
    staff_id = $2, shift_date = $3, start_time = $4, end_time = $5, status = $6, notes = $7
WHERE id = $1
RETURNING id, staff_id, shift_date, start_time, end_time, status, notes, created_at
`

type UpdateShiftParams struct {
	ID        pgtype.UUID `json:"id"`
	StaffID   pgtype.UUID `json:"staff_id"`
	ShiftDate pgtype.Date `json:"shift_date"`
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
	Status    pgtype.Text `json:"status"`
	Notes     pgtype.Text `json:"notes"`
}

func (q *Queries) UpdateShift(ctx context.Context, arg UpdateShiftParams) (Shift, error) {
	row := q.db.QueryRow(ctx, updateShift,
		arg.ID,
		arg.StaffID,
		arg.ShiftDate,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
		arg.Notes,
	)
	var i Shift
	err := row.Scan(
		&i.ID,
		&i.StaffID,
		&i.ShiftDate,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}
