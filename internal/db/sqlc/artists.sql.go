// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: artists.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countArtists = `-- name: CountArtists :one
SELECT COUNT(*) FROM artists
`

func (q *Queries) CountArtists(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countArtists)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (id, name, biography, birth_date, death_date, nationality)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5)
RETURNING id, name, biography, birth_date, death_date, nationality, created_at
`

type CreateArtistParams struct {
	Name        string      `json:"name"`
	Biography   pgtype.Text `json:"biography"`
	BirthDate   pgtype.Date `json:"birth_date"`
	DeathDate   pgtype.Date `json:"death_date"`
	Nationality pgtype.Text `json:"nationality"`
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) (Artist, error) {
	row := q.db.QueryRow(ctx, createArtist,
		arg.Name,
		arg.Biography,
		arg.BirthDate,
		arg.DeathDate,
		arg.Nationality,
	)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Biography,
		&i.BirthDate,
		&i.DeathDate,
		&i.Nationality,
		&i.CreatedAt,
	)
	return i, err
}

const getAllArtists = `-- name: GetAllArtists :many
SELECT id, name, biography, birth_date, death_date, nationality, created_at FROM artists
`

func (q *Queries) GetAllArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.Query(ctx, getAllArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artist{}
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Biography,
			&i.BirthDate,
			&i.DeathDate,
			&i.Nationality,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtist = `-- name: GetArtist :one
SELECT id, name, biography, birth_date, death_date, nationality, created_at FROM artists
WHERE id = $1
`

func (q *Queries) GetArtist(ctx context.Context, id pgtype.UUID) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtist, id)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Biography,
		&i.BirthDate,
		&i.DeathDate,
		&i.Nationality,
		&i.CreatedAt,
	)
	return i, err
}

const updateArtist = `-- name: UpdateArtist :one
UPDATE artists
SET name = $2, biography = $3, birth_date = $4, death_date = $5, nationality = $6
WHERE id = $1
RETURNING id, name, biography, birth_date, death_date, nationality, created_at
`

type UpdateArtistParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Biography   pgtype.Text `json:"biography"`
	BirthDate   pgtype.Date `json:"birth_date"`
	DeathDate   pgtype.Date `json:"death_date"`
	Nationality pgtype.Text `json:"nationality"`
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) (Artist, error) {
	row := q.db.QueryRow(ctx, updateArtist,
		arg.ID,
		arg.Name,
		arg.Biography,
		arg.BirthDate,
		arg.DeathDate,
		arg.Nationality,
	)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Biography,
		&i.BirthDate,
		&i.DeathDate,
		&i.Nationality,
		&i.CreatedAt,
	)
	return i, err
}
